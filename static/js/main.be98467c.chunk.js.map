{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistic.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","Statistics","props","good","neutral","bad","countTotal","calculateFeedback","toFixed","FeedbackOptions","options","onFeedbackBtnClick","map","el","type","onClick","Notification","message","App","useState","setGood","setNeutral","setBad","prevState","console","error","Statistic","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAeeA,MAbf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCiBQC,MArBf,SAAoBC,GAClB,IAAQC,EAAsDD,EAAtDC,KAAMC,EAAgDF,EAAhDE,QAASC,EAAuCH,EAAvCG,IAAKC,EAAkCJ,EAAlCI,WAAYC,EAAsBL,EAAtBK,kBACxC,OACE,gCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,OACX,oDAAuBC,IAAoBC,QAAQ,GAAnD,WCWSC,MAnBf,YAA2D,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,mBAClC,OACE,8BACGD,EAAQE,KAAI,SAACC,GACZ,OACE,wBAAiBC,KAAK,SAASC,QAAS,kBAAMJ,EAAmBE,IAAjE,SACGA,GADUA,SCGRG,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KCwDEC,MArDf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOhB,EAAP,KAAaiB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOf,EAAP,KAAgBiB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOd,EAAP,KAAYiB,EAAZ,KAmBMhB,EAAa,kBAAMH,EAAOC,EAAUC,GAM1C,OACE,gCACE,cAAC,EAAD,CAASN,MAAM,wBAAf,SACE,cAAC,EAAD,CACEW,QANQ,CAAC,OAAQ,UAAW,OAO5BC,mBA5BmB,SAACG,GAC1B,OAAQA,GACN,IAAK,OACHM,GAAQ,SAACG,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHF,GAAW,SAACE,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHD,GAAO,SAACC,GAAD,OAAeA,EAAY,KAClC,MACF,QACEC,QAAQC,MAAM,2BAA6BX,SAmB7C,cAAC,EAAD,CAASf,MAAM,aAAf,SACGO,IACC,cAACoB,EAAD,CACEvB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,WAAYA,EACZC,kBAnBgB,kBAAOJ,EAAe,IAAPA,EAAcG,IAAe,KAsB9D,cAAC,EAAD,CAAcW,QAAQ,4BC/ChCU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.be98467c.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\n\nfunction Statistics(props) {\n  const { good, neutral, bad, countTotal, calculateFeedback } = props;\n  return (\n    <div>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {countTotal()}</p>\n      <p>Positive feedback: {calculateFeedback().toFixed(0)}%</p>\n    </div>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  countTotal: PropTypes.func.isRequired,\n  calculateFeedback: PropTypes.func.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from \"prop-types\";\n\nfunction FeedbackOptions({ options, onFeedbackBtnClick }) {\n  return (\n    <div>\n      {options.map((el) => {\n        return (\n          <button key={el} type=\"button\" onClick={() => onFeedbackBtnClick(el)}>\n            {el}\n          </button>\n        );\n      })}\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onFeedbackBtnClick: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\n\nfunction Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { useState } from \"react\";\nimport Section from \"./components/Section/Section\";\nimport Statistics from \"./components/Statistics/Statistic\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./components/Notification/Notification\";\n\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onFeedbackBtnClick = (type) => {\n    switch (type) {\n      case \"good\":\n        setGood((prevState) => prevState + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n      case \"bad\":\n        setBad((prevState) => prevState + 1);\n        break;\n      default:\n        console.error(\"onFeedbackBtnClick type:\" + type);\n        break;\n    }\n  };\n\n  const countTotal = () => good + neutral + bad;\n\n  const calculateFeedback = () => (good ? (good * 100) / countTotal() : 0);\n\n  const options = [\"good\", \"neutral\", \"bad\"];\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={options}\n          onFeedbackBtnClick={onFeedbackBtnClick}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {countTotal() ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            countTotal={countTotal}\n            calculateFeedback={calculateFeedback}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}